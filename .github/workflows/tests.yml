name: Tests

on:
  pull_request:
    branches: [ a5c/main ]
  push:
    branches: [ a5c/main ]

jobs:
  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install
        run: |
          ./scripts/install.sh
      - name: Build
        run: |
          ./scripts/build.sh
      - name: Test
        run: |
          ./scripts/test.sh
      - name: CLI smoke: normalize | validate sample
        run: |
          # build CLI if not already built by pretest
          npm run build --silent
          # normalize a sample and validate against the schema using built-in validator
          node dist/cli.js normalize \
            --in samples/workflow_run.completed.json \
            --out /tmp/out.validate.json
          node dist/cli.js validate \
            --in /tmp/out.validate.json \
            --schema docs/specs/ne.schema.json \
            --quiet
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: |
            coverage/lcov.info
      - name: Coverage summary (enforce thresholds)
        if: always()
        run: |
          node --version
          node scripts/coverage-summary.ts | tee /tmp/coverage-summary.md || true
      - name: Comment coverage on PR
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          body_file=/tmp/coverage-summary.md
          if [ ! -s "$body_file" ]; then
            echo "No coverage summary available." > "$body_file"
          fi
          # Create or update a sticky comment
          existing=$(gh api \
            repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            --jq 'map(select(.body|startswith("## Coverage Summary"))) | .[0].id' || echo "")
          if [ -n "$existing" ] && [ "$existing" != "null" ]; then
            gh api -X PATCH \
              repos/${{ github.repository }}/issues/comments/$existing \
              -f body@"$body_file"
          else
            gh api -X POST \
              repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
              -f body@"$body_file"
          fi
