name: Quick Checks

on:
  pull_request:
    branches: [a5c/main, main]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: quick-checks-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  pr-fast:
    name: Lint, Typecheck, Unit Tests, Filenames, Actionlint, EditorConfig
    runs-on: ubuntu-latest
    timeout-minutes: 7
    env:
      # Optional Codecov token; when empty, upload step is skipped
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN || vars.CODECOV_TOKEN || '' }}
      # Pinned validator tools used for example validation
      AJV_CLI_VERSION: "5.0.0" # ajv-cli v5 (Ajv v8, Draft 2020-12)
      AJV_FORMATS_VERSION: "3.0.1" # ajv-formats v3 for Ajv v8
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
      - name: Install
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
      - name: Lint (eslint)
        run: npm run -s lint
      - name: Lint (filenames)
        run: npm run -s lint:filenames
      - name: Validate GitHub Workflows (actionlint)
        run: |
          bash scripts/ci-actionlint.sh
      - name: Check EditorConfig compliance
        run: |
          bash scripts/ci-editorconfig.sh
      - name: Typecheck (tsc --noEmit)
        run: npm run -s typecheck
      - name: Unit tests (vitest)
        run: npm run -s test:ci
      - name: Example validation (NE schema) â€” ajv-cli with fallback
        shell: bash
        run: |
          set -euo pipefail
          # Build CLI if not already built by previous steps
          npm run -s build
          # Produce a sample NE JSON from a known fixture
          node dist/cli.js normalize \
            --in samples/workflow_run.completed.json \
            --out /tmp/out.ne.json
          echo "Attempting ajv-cli@${AJV_CLI_VERSION} validation (ajv-formats@${AJV_FORMATS_VERSION})"
          if ! npx -y ajv-cli@"${AJV_CLI_VERSION}" validate \
              -s docs/specs/ne.schema.json \
              -d /tmp/out.ne.json \
              --spec=draft2020 \
              -c ajv-formats@"${AJV_FORMATS_VERSION}"; then
            echo "ajv-cli unavailable or failed; falling back to built-in CLI validator"
            node dist/cli.js validate \
              --in /tmp/out.ne.json \
              --schema docs/specs/ne.schema.json \
              --quiet
          fi
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: |
            coverage/lcov.info
            coverage/coverage-summary.json
          if-no-files-found: ignore
      # Single optional Codecov upload guarded by token
      - name: Coverage summary
        if: always()
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            node -e '
              const fs = require("fs");
              const sum = JSON.parse(fs.readFileSync("coverage/coverage-summary.json","utf8"));
              const t = sum.total || {};
              const row = (k) => `| ${k} | ${((t[k]?.pct ?? 0)).toFixed(2)}% | ${t[k]?.covered ?? 0}/${t[k]?.total ?? 0} |`;
              const out = [
                "## Coverage Summary",
                "",
                "| Metric | Percent | Covered/Total |",
                "|---|---:|---:|",
                row("lines"),
                row("statements"),
                row("functions"),
                row("branches"),
                "",
              ].join("\n");
              fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, out);
            ';
          else
            echo "coverage/coverage-summary.json not found; ensure vitest json-summary reporter is enabled" >> "$GITHUB_STEP_SUMMARY";
          fi
      - name: Upload to Codecov (optional)
        # Upload to Codecov only when CODECOV_TOKEN is configured
        if: env.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          token: ${{ env.CODECOV_TOKEN }}
          files: |
            coverage/lcov.info
          flags: pr
          fail_ci_if_error: false
          verbose: true
