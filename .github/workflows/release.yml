name: Release

on:
  push:
    branches:
      - a5c/main
      - main

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: "npm"
      - name: Install
        env:
          HUSKY: 0
        run: |
          if [ -f package-lock.json ]; then
            echo "Attempting clean install via npm ci..."
            if ! npm ci; then
              echo "npm ci failed (likely lockfile mismatch). Falling back to npm install to update lockfile..."
              npm install
            fi
          else
            npm install
          fi
      - name: Setup Node.js for GitHub Packages (a5c/main only)
        if: github.ref == 'refs/heads/a5c/main'
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: "https://npm.pkg.github.com"
      - name: Build
        run: npm run -s build
      - name: Release (a5c/main prerelease)
        if: github.ref == 'refs/heads/a5c/main'
        env:
          # Use GitHub token (PAT) for GitHub Packages auth; do not use npmjs token here
          GITHUB_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          HUSKY: 0
        shell: bash
        run: |
          set -euo pipefail
          attempts=0
          max_attempts=3
          backoff=10
          while true; do
            attempts=$((attempts+1))
            echo "[semantic-release] Attempt $attempts/$max_attempts"
            # Capture output to inspect for transient errors
            if out=$(npx semantic-release 2>&1); then
              echo "$out"
              break
            fi
            rc=$?
            echo "$out"
            # Retry only on transient GitHub/Network errors
            if [[ $attempts -lt $max_attempts ]] && \
              echo "$out" | grep -Eiq '(5[0-9]{2}|Bad Gateway|ECONNRESET|ETIMEDOUT|ENETUNREACH|socket hang up|rate limit|Service Unavailable)'; then
              echo "Transient error detected. Sleeping ${backoff}s before retry..."
              sleep "$backoff"
              backoff=$((backoff*2))
              continue
            fi
            exit "$rc"
          done
      - name: Release (main stable)
        if: github.ref == 'refs/heads/main'
        env:
          # Use GitHub token for GitHub Packages; npmjs publish uses separate step
          GITHUB_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          HUSKY: 0
        shell: bash
        run: |
          set -euo pipefail
          attempts=0
          max_attempts=3
          backoff=10
          while true; do
            attempts=$((attempts+1))
            echo "[semantic-release] Attempt $attempts/$max_attempts"
            if out=$(npx semantic-release 2>&1); then
              echo "$out"
              break
            fi
            rc=$?
            echo "$out"
            if [[ $attempts -lt $max_attempts ]] && \
              echo "$out" | grep -Eiq '(5[0-9]{2}|Bad Gateway|ECONNRESET|ETIMEDOUT|ENETUNREACH|socket hang up|rate limit|Service Unavailable)'; then
              echo "Transient error detected. Sleeping ${backoff}s before retry..."
              sleep "$backoff"
              backoff=$((backoff*2))
              continue
            fi
            exit "$rc"
          done
      - name: Setup Node.js for npmjs (main only)
        if: github.ref == 'refs/heads/main'
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: "https://registry.npmjs.org"
      - name: Publish to npmjs (main only)
        if: github.ref == 'refs/heads/main'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -euo pipefail
          # Ensure dist exists (semantic-release should have built during build step)
          test -d dist || { echo "dist missing"; exit 1; }
          # Read version from package.json
          VERSION=$(node -p "require('./package.json').version")
          NAME=$(node -p "require('./package.json').name")
          echo "Attempt publish ${NAME}@${VERSION} to registry.npmjs.org"

          # Temporarily override project .npmrc to ensure scoped package uses npmjs (not GitHub Packages)
          BACKUP_NPMRC=false
          if [ -f .npmrc ]; then
            mv .npmrc .npmrc.gpr
            BACKUP_NPMRC=true
          fi
          # Always restore .npmrc on exit
          cleanup() {
            if [ "$BACKUP_NPMRC" = true ]; then
              rm -f .npmrc || true
              mv .npmrc.gpr .npmrc || true
            else
              rm -f .npmrc || true
            fi
          }
          trap cleanup EXIT

          cat > .npmrc <<'NPMRC'
          fund=false
          audit=false
          save-exact=true
          //registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}
          @a5c-ai:registry=https://registry.npmjs.org/
          NPMRC

          echo "Auth check against npmjs: $(npm whoami --registry=https://registry.npmjs.org || echo 'not authenticated')"

          # Pre-check after forcing scope registry to npmjs (robust against scoped registry overrides)
          if npm view "${NAME}@${VERSION}" version --registry=https://registry.npmjs.org > /dev/null 2>&1; then
            echo "Version ${NAME}@${VERSION} already exists on npmjs, skipping publish."
            exit 0
          fi

          # Retry helper for transient errors; treat already-published conflicts as success
          attempts=0
          max_attempts=3
          backoff=5
          while true; do
            attempts=$((attempts+1))
            echo "npm publish attempt ${attempts}/${max_attempts}"
            if out=$(npm publish --registry=https://registry.npmjs.org --access public 2>&1); then
              echo "$out"
              break
            fi
            rc=$?
            echo "$out"
            # If version is already published, consider success and exit 0
            if echo "$out" | grep -Eiq 'You cannot publish over the previously published versions|EPUBLISHCONFLICT|previously published'; then
              echo "Version already exists on npmjs (detected after publish). Skipping as success."
              exit 0
            fi
            # Retry on transient errors
            if [ $attempts -lt $max_attempts ] && echo "$out" | grep -Eiq '(5[0-9]{2}|Bad Gateway|Service Unavailable|ETIMEDOUT|ECONNRESET|EAI_AGAIN|ESOCKETTIMEDOUT|network error|socket hang up|fetch failed|rate limit)'; then
              echo "Transient error detected. Sleeping ${backoff}s before retry..."
              sleep "$backoff"
              backoff=$((backoff*2))
              continue
            fi
            exit "$rc"
          done
