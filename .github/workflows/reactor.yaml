name: Reactor
env:
  A5C_LOG_LEVEL: ${{ github.event.inputs.debug || 'false' && 'debug' || 'info' }}
on:
  push:
  pull_request:
    types: [opened, reopened, ready_for_review]
  issue_comment:
  issues:
  workflow_dispatch:
  repository_dispatch:
  check_run:
  check_suite:
permissions:
  contents: read
  packages: read
  id-token: write
  actions: write
  statuses: write
  checks: write
  repository-projects: write
jobs:
  reactor:
    runs-on: ubuntu-latest
    steps:
      # - name: Checkout
      # uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        # with:
        # node-version-file: .nvmrc
        # Avoid setting global registry to GPR; use project .npmrc scoping instead
      - name: Configure npm auth (env)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Create a project-level npmrc and point npm to use it for all subsequent steps
          echo "registry=https://registry.npmjs.org" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
          echo "@a5c-ai:registry=https://npm.pkg.github.com/" >> .npmrc
          echo "always-auth=true" >> .npmrc
          export NPM_CONFIG_USERCONFIG="$PWD/.npmrc"
          echo "NPM_CONFIG_USERCONFIG=$NPM_CONFIG_USERCONFIG" >> "$GITHUB_ENV"
          npm whoami || true
      - name: Run npx package help
        env:
          NODE_AUTH_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          NPM_CONFIG_USERCONFIG: ${{ env.NPM_CONFIG_USERCONFIG }}
        run: |
          set -euo pipefail
          # Prefer dev channel on a5c/main; fallback to latest if not found
          PKG_SPEC="@a5c-ai/events@a5c-main"
          if npx -y "$PKG_SPEC" --help >/dev/null 2>&1; then
            echo "Resolved package: $PKG_SPEC"
          else
            PKG_SPEC="@a5c-ai/events@latest"
            echo "Fallback package: $PKG_SPEC"
            npx -y "$PKG_SPEC" --help >/dev/null
          fi
          echo "A5C_PKG_SPEC=$PKG_SPEC" >> "$GITHUB_ENV"
      - name: Enrich and run reactor with actual github context
        env:
          NODE_AUTH_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          NPM_CONFIG_USERCONFIG: ${{ env.NPM_CONFIG_USERCONFIG }}
          GITHUB_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          A5C_EVENT_CONFIG_BRANCH: ${{ env.A5C_EVENT_CONFIG_BRANCH || 'a5c/main' }}
        run: |
          set -euo pipefail
          npx -y "$A5C_PKG_SPEC" enrich \
            --in "$GITHUB_EVENT_PATH" \
            --out out.enrich.json \
            --use-github
          # enriched structure exists
          jq -e '.enriched and .payload and (.labels // []) != null' out.enrich.json >/dev/null
          cat out.enrich.json
          # Only run reactor if a config is present in repo
          npx -y "$A5C_PKG_SPEC" reactor \
            --in out.enrich.json \
            --file github://a5c-ai/events/branch/a5c%2Fmain/.a5c/events/ \
            --out out.reactor.json \
          # list of events to emit
          jq -r '.events[]' out.reactor.json || true
          cat out.reactor.json || true
          # emit the events using the CLI (repository_dispatch)
          npx -y "$A5C_PKG_SPEC" emit \
            --in out.reactor.json \
            --sink github
          echo "Done emitting events via emit command"
