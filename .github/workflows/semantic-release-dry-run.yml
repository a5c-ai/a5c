name: Semantic Release Dry Run

on:
  pull_request:
    branches: [a5c/main]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read

jobs:
  semantic-release-dry-run:
    name: semantic-release --dry-run (analysis only)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm

      - name: Install (dev deps)
        env:
          HUSKY: 0
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: semantic-release dry run (analysis)
        id: semrel
        env:
          # Provide GitHub token only. No registry tokens are required for analysis-only run.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: semantic-release:*,@semantic-release/*
        shell: bash
        run: |
          set -euo pipefail
          : > /tmp/semrel.out.log
          : > /tmp/semrel.err.log

          # Create a minimal, temporary semantic-release config for analysis only.
          # This avoids npm/registry verification while still exercising commit analysis.
          cat > /tmp/.releaserc.dryrun.cjs <<'RC'
          module.exports = {
            branches: [
              { name: 'a5c/main', channel: 'a5c-main', prerelease: 'a5c-main' },
              { name: 'main' },
            ],
            plugins: [
              ["@semantic-release/commit-analyzer", { preset: "conventionalcommits" }],
              ["@semantic-release/release-notes-generator", { preset: "conventionalcommits" }],
            ],
          };
          RC

          BASE_REF=${GITHUB_BASE_REF:-a5c/main}
          echo "Dry running semantic-release against branches=${BASE_REF} (analysis only)" | tee -a /tmp/semrel.out.log

          # Run dry-run with the minimal config and capture output for summary parsing.
          # Use --no-ci to relax CI-specific guards in PR contexts.
          if npx semantic-release --dry-run --no-ci --branches "$BASE_REF" --extends /tmp/.releaserc.dryrun.cjs 2> >(tee -a /tmp/semrel.err.log >&2) | tee -a /tmp/semrel.out.log; then
            echo "status=success" >> "$GITHUB_OUTPUT"
          else
            echo "status=failure" >> "$GITHUB_OUTPUT"
          fi

          # Predict next release type/version from logs.
          PREDICT_TYPE=""
          PREDICT_VERSION=""

          # Try to infer type from commit-analyzer debug logs.
          if grep -Eiq "(release type is|type\":\s*\"(major|minor|patch)\")" /tmp/semrel.out.log /tmp/semrel.err.log; then
            PREDICT_TYPE=$(grep -Ei "(release type is|type\":\s*\"(major|minor|patch)\")" /tmp/semrel.out.log /tmp/semrel.err.log | head -n1 | sed -E "s/.*(major|minor|patch).*/\1/i")
          fi
          # Extract version when available.
          if grep -Eiq "next release version is" /tmp/semrel.out.log /tmp/semrel.err.log; then
            PREDICT_VERSION=$(grep -Ei "next release version is" /tmp/semrel.out.log /tmp/semrel.err.log | head -n1 | sed -E "s/.*next release version is ([0-9]+\.[0-9]+\.[0-9]+).*/\1/")
          fi
          # Detect no-release case from standard message.
          NOREL="false"
          if grep -Eiq "no (new )?version is released|no relevant changes" /tmp/semrel.out.log /tmp/semrel.err.log; then
            NOREL="true"
          fi

          echo "type=${PREDICT_TYPE}" >> "$GITHUB_OUTPUT"
          echo "version=${PREDICT_VERSION}" >> "$GITHUB_OUTPUT"
          echo "norelease=${NOREL}" >> "$GITHUB_OUTPUT"

      - name: Step summary
        if: always()
        env:
          STATUS: ${{ steps.semrel.outputs.status || 'unknown' }}
          TYPE: ${{ steps.semrel.outputs.type || '' }}
          VERSION: ${{ steps.semrel.outputs.version || '' }}
          NOREL: ${{ steps.semrel.outputs.norelease || 'false' }}
        run: |
          {
            echo "## Semantic Release â€” Dry Run"
            echo "Branch base: ${GITHUB_BASE_REF}"
            echo "Status: ${STATUS}"
            if [ "${NOREL}" = "true" ]; then
              echo "Prediction: no release (no relevant changes)"
            else
              if [ -n "${TYPE}" ] || [ -n "${VERSION}" ]; then
                echo "Prediction: ${TYPE:-unknown type}${VERSION:+ -> ${VERSION}}"
              else
                echo "Prediction: unavailable (see logs)"
              fi
            fi
            echo ""
            echo "_Analysis-only run using minimal semrel config to avoid registry auth; publishes are not executed._"
          } >> "$GITHUB_STEP_SUMMARY"
          # end of step
