name: a5c
concurrency:
  group: a5c-${{github.event_name}}-${{ github.ref }}-${{ github.event_name == 'workflow_run' && github.event.workflow_run.name || '' }}-${{ github.event_name == 'issue_comment' && github.event.issue.number || '' }}-${{ github.event_name == 'issues' && github.event.issue.number || '' }}-${{ github.event_name == 'pull_request' && github.head_ref || '' }}

env:
  DISABLE_AUTOUPDATER: 1
  CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: 1
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  AZURE_OPENAI_PROJECT_NAME: ${{ vars.AZURE_OPENAI_PROJECT_NAME || '' }}
  AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY || '' }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || '' }}
  DEBUG: ${{ github.event.inputs.debug || 'false' }}
  GITHUB_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
  DISCORD_GUILD_ID: ${{ vars.DISCORD_GUILD_ID }}
  A5C_CLI_TOOL: ${{ vars.A5C_CLI_TOOL }}
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN || '' }}
  SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET || '' }}
  SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN || '' }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN || '' }}
  VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID || '' }}
  VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID || '' }}
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN || '' }}
  SUPABASE_ORG_ID: ${{ vars.SUPABASE_ORG_ID || '' }}
  SUPABASE_PROJECT_REF: ${{ vars.SUPABASE_PROJECT_REF || '' }}
  SUPABASE_PROJECT_URL: ${{ vars.SUPABASE_PROJECT_URL || '' }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD || '' }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY || '' }}
  STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY || '' }}
  STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET || '' }}
  STRIPE_WEBHOOK_URL: ${{ vars.STRIPE_WEBHOOK_URL || '' }}
  STRIPE_WEBHOOK_ID: ${{ vars.STRIPE_WEBHOOK_ID || '' }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID || '' }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY || '' }}
  AWS_REGION: ${{ vars.AWS_REGION || '' }}
  # Healthchecks heartbeat (optional)
  HEALTHCHECKS_A5C_SCHEDULE_PING_URL: ${{ secrets.HEALTHCHECKS_A5C_SCHEDULE_PING_URL || '' }}
  # gcloud credentials
  GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS || '' }}
  # azure credentials
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID || '' }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET || '' }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID || '' }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID || '' }}
  AZURE_AKS_CLUSTER_NAME: ${{ vars.AZURE_AKS_CLUSTER_NAME || '' }}
  AZURE_RESOURCE_GROUP_NAME: ${{ vars.AZURE_RESOURCE_GROUP_NAME || '' }}
  # auth credentials
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID || '' }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET || '' }}
  AUTH_GITHUB_CLIENT_ID: ${{ secrets.AUTH_GITHUB_CLIENT_ID || '' }}
  AUTH_GITHUB_CLIENT_SECRET: ${{ secrets.AUTH_GITHUB_CLIENT_SECRET || '' }}
  AUTH_GITHUB_ORG_ID: ${{ vars.AUTH_GITHUB_ORG_ID || '' }}
  AUTH_GITHUB_ORG_NAME: ${{ vars.AUTH_GITHUB_ORG_NAME || '' }}
  AUTH_GITHUB_ORG_DESCRIPTION: ${{ vars.AUTH_GITHUB_ORG_DESCRIPTION || '' }}

  # other credentials
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY || '' }}
  HEROKU_APP_NAME: ${{ vars.HEROKU_APP_NAME || '' }}
  HEROKU_APP_ID: ${{ vars.HEROKU_APP_ID || '' }}
  HEROKU_APP_URL: ${{ vars.HEROKU_APP_URL || '' }}
# Universal event triggers - the agent router will handle filtering
on:
  # Pull Request Events
  # pull_request:
  #   types: [opened, reopened]
  #   branches: [a5c/main]

  # Push Events
  # push:
  #   branches: [main, develop, master]

  # Issue Events
  issues:
    types: [opened]

  # Issue Comment Events
  issue_comment:
    types: [created]

  # Scheduled Events
  schedule:
    # Every 30 minutes
    - cron: "*/30 * * * *"
    # twice a day at 9
    - cron: "0 9,21 * * *"
  workflow_run:
    types: [completed]
    workflows:
      [
        Build,
        Deploy,
        Packages Npx Test,
        Lint,
        Tests,
        PR Quick Tests,
        Quick Checks,
        Typecheck,
        Commit Hygiene,
        Docs Lint,
        Release,
      ]

  # Manual Triggers
  workflow_dispatch:
    inputs:
      agent_uri:
        description: "Specific agent to run (optional - leave empty for auto-routing)"
        required: false
      debug:
        description: "Enable debug mode"
        required: false
        default: false
        type: boolean

jobs:
  # Single job that handles all agent routing and execution
  a5c:
    runs-on: ubuntu-latest-m
    permissions:
      contents: write
      pull-requests: write
      issues: write
      security-events: write
      actions: write
      attestations: write
      checks: write
      deployments: write
      discussions: write
      id-token: write
      models: read
      packages: write
      pages: write
      statuses: write

    steps:
      - name: Heartbeat Start (scheduled)
        if: github.event_name == 'schedule' && env.HEALTHCHECKS_A5C_SCHEDULE_PING_URL != ''
        env:
          PING: ${{ env.HEALTHCHECKS_A5C_SCHEDULE_PING_URL }}
        run: |
          set -euxo pipefail
          # Send start ping; tolerate transient failures without failing job start
          curl -fsS -m 10 --retry 3 --retry-connrefused "$PING/start" || true
      - name: Filter Self Workflow-run
        id: filter-self
        # in case this is a workflow_run event, skip if the workflow did not fail.
        if: github.event_name == 'workflow_run' && (github.event.workflow_run.conclusion != 'failure' || (github.event.workflow_run.head_branch != 'a5c/main' && github.event.workflow_run.head_branch != 'main') )
        run: |
          echo "skip=true" >> "$GITHUB_OUTPUT"
          exit 0
      - name: a5c token
        id: a5c-token
        continue-on-error: true
        if: steps.filter-self.outputs.skip != 'true'
        uses: a5c-ai/generate-token-action@main
      - name: Checkout Repository
        uses: actions/checkout@v4
        if: steps.filter-self.outputs.skip != 'true'
        with:
          fetch-depth: 0
          token: ${{ steps.a5c-token.outputs.a5c_token || secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Run A5C
        id: agents
        uses: a5c-ai/action@main
        if: steps.filter-self.outputs.skip != 'true'
        with:
          # Auto-routing by default, unless specific agent is requested
          agent_uri: ${{ github.event.inputs.agent_uri || '' }}
          github_token: ${{ steps.a5c-token.outputs.a5c_token || secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Upload artifacts
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        if: steps.filter-self.outputs.skip != 'true'
        with:
          name: a5c-artifacts
          path: |
            /tmp/agent-output.md
            /tmp/agent-output-*/**
      - name: Heartbeat Complete (scheduled)
        if: always() && github.event_name == 'schedule' && env.HEALTHCHECKS_A5C_SCHEDULE_PING_URL != ''
        env:
          PING: ${{ env.HEALTHCHECKS_A5C_SCHEDULE_PING_URL }}
          OUTCOME: ${{ job.status }}
        run: |
          set -euxo pipefail
          case "$OUTCOME" in
            success)
              curl -fsS -m 10 --retry 3 --retry-connrefused "$PING" || true
              ;;
            cancelled)
              curl -fsS -m 10 --retry 3 --retry-connrefused "$PING/cancel" || true
              ;;
            *)
              curl -fsS -m 10 --retry 3 --retry-connrefused "$PING/fail" || true
              ;;
          esac
