name: "Obs Summary & Artifact"
description: "Aggregate job metrics, write step summary, and upload observability.json"
author: "a5c.ai"
runs:
  using: "composite"
  steps:
    - name: Collect metrics and write summary + file
      id: collect
      shell: bash
      run: |
        set -euo pipefail
        # Defaults (prefer shell defaults over expressions for portability)
        OBS_FILE="${OBS_FILE:-observability.json}"
        JOB_NAME="${JOB_NAME:-${GITHUB_JOB:-}}"
        WORKFLOW_NAME="${WORKFLOW_NAME:-${GITHUB_WORKFLOW:-}}"
        RUN_ID="${RUN_ID:-${GITHUB_RUN_ID:-}}"
        RUN_ATTEMPT="${RUN_ATTEMPT:-${GITHUB_RUN_ATTEMPT:-1}}"
        REPO="${REPO:-${GITHUB_REPOSITORY:-}}"
        SHA="${SHA:-${GITHUB_SHA:-}}"
        BRANCH_REF="${BRANCH_REF:-${GITHUB_REF:-}}"
        CONCLUSION="${CONCLUSION:-}"
        # Optional: caller can pass the workflow run start time; else we'll fallback
        RUN_STARTED_AT="${RUN_STARTED_AT:-}"

        echo "OBS_FILE=${OBS_FILE}" >> "$GITHUB_ENV"

        # Compose JSON (includes coverage, optional cache metrics, started_at/duration)
        node -e '
          const fs = require("fs");
          const env = (k, d = "") => process.env[k] ?? d;
          const startedAtEnv = env("RUN_STARTED_AT") || env("GITHUB_RUN_STARTED_AT") || "";
          const startedAt = startedAtEnv || new Date().toISOString();
          let cov = null;
          try { cov = JSON.parse(fs.readFileSync("coverage/coverage-summary.json", "utf8")); } catch {}
          // Parse Vitest JSON for retries and slow tests if available
          let vitest = null;
          try { vitest = JSON.parse(fs.readFileSync("vitest-results.json", "utf8")); } catch {}
          let tests = null;
          if (vitest && vitest.testResults) {
            const all = [];
            for (const tr of vitest.testResults) {
              for (const a of (tr.assertionResults || [])) {
                const meta = a.meta || {};
                const attempts = Number(meta.retryCount || meta.retries || 0);
                const duration = a.duration ?? null;
                all.push({
                  fullName: a.fullName || a.title || "",
                  status: a.status,
                  duration_ms: typeof duration === 'number' ? duration : null,
                  retries: attempts,
                });
              }
            }
            const slowest = [...all]
              .filter(t => typeof t.duration_ms === 'number')
              .sort((a,b) => (b.duration_ms||0) - (a.duration_ms||0))
              .slice(0, 10);
            const flaky = all.filter(t => (t.retries||0) > 0);
            tests = {
              totals: {
                total: all.length,
                flaky: flaky.length,
                slow_count: slowest.length,
              },
              slowest,
              flaky,
            };
          }
          // Collect cache entries from env keys like CACHE_<KIND>_HIT=true/false
          const cacheEntries = [];
          for (const [k, v] of Object.entries(process.env)) {
            const m = /^CACHE_([A-Z0-9]+)_HIT$/.exec(k);
            if (!m) continue;
            const kind = m[1].toLowerCase();
            const hit = String(v).toLowerCase() === "true" || String(v) === "1";
            cacheEntries.push({ kind, hit });
          }
          const hits = cacheEntries.filter(e => e.hit).length;
          const total = cacheEntries.length;
          const cache = total ? { entries: cacheEntries, summary: { hits, misses: total - hits, total } } : null;
          const end = new Date();
          const endIso = end.toISOString();
          let durationMs = null;
          try {
            const s = new Date(startedAt);
            if (!isNaN(s.getTime())) durationMs = end.getTime() - s.getTime();
          } catch {}
          const obs = {
            repo: env("GITHUB_REPOSITORY") || env("REPO"),
            workflow: env("GITHUB_WORKFLOW") || env("WORKFLOW_NAME"),
            job: env("JOB_NAME") || env("GITHUB_JOB"),
            run: {
              id: env("GITHUB_RUN_ID") || env("RUN_ID"),
              attempt: Number(env("GITHUB_RUN_ATTEMPT") || env("RUN_ATTEMPT") || "1"),
              sha: env("GITHUB_SHA") || env("SHA"),
              ref: env("GITHUB_REF") || env("BRANCH_REF"),
              actor: env("GITHUB_ACTOR", ""),
              event_name: env("GITHUB_EVENT_NAME", ""),
              conclusion: env("CONCLUSION", ""),
              started_at: startedAt,
              completed_at: endIso,
              duration_ms: durationMs,
            },
            metrics: { coverage: cov, cache },
            tests,
          };
          process.stdout.write(JSON.stringify(obs, null, 2));
        ' > "$OBS_FILE"

        echo "## Observability" >> "$GITHUB_STEP_SUMMARY"
        echo "- Repo: ${REPO}" >> "$GITHUB_STEP_SUMMARY"
        echo "- Workflow: ${WORKFLOW_NAME}" >> "$GITHUB_STEP_SUMMARY"
        echo "- Job: ${JOB_NAME}" >> "$GITHUB_STEP_SUMMARY"
        echo "- Run: ${RUN_ID} (attempt ${RUN_ATTEMPT})" >> "$GITHUB_STEP_SUMMARY"
        if [ -n "${CONCLUSION}" ]; then
          echo "- Conclusion: ${CONCLUSION}" >> "$GITHUB_STEP_SUMMARY"
        fi
        if [ -f coverage/coverage-summary.json ]; then
          LINES=$(node -e "const s=require('fs').readFileSync('coverage/coverage-summary.json','utf8'); const t=JSON.parse(s).total||{}; console.log((t.lines?.pct??0).toFixed(2))")
          FUNCS=$(node -e "const s=require('fs').readFileSync('coverage/coverage-summary.json','utf8'); const t=JSON.parse(s).total||{}; console.log((t.functions?.pct??0).toFixed(2))")
          BRANCHES=$(node -e "const s=require('fs').readFileSync('coverage/coverage-summary.json','utf8'); const t=JSON.parse(s).total||{}; console.log((t.branches?.pct??0).toFixed(2))")
          echo "- Coverage: lines ${LINES}% | funcs ${FUNCS}% | branches ${BRANCHES}%" >> "$GITHUB_STEP_SUMMARY"
        fi
        # Duration line (if computable)
        DUR=$(node -e "try{const o=JSON.parse(require('fs').readFileSync(process.env.OBS_FILE,'utf8')); if(o?.run?.duration_ms!=null){ console.log(o.run.duration_ms) }}catch{}") || true
        if [ -n "${DUR}" ]; then
          echo "- Duration: ${DUR} ms" >> "$GITHUB_STEP_SUMMARY"
        fi
        # If vitest JSON exists, append flaky/slow summary
        if [ -f vitest-results.json ]; then
          node -e '
            const fs = require("fs");
            const s = fs.readFileSync("vitest-results.json","utf8");
            const v = JSON.parse(s);
            const all = [];
            for (const tr of (v.testResults||[])) {
              for (const a of (tr.assertionResults||[])) {
                const meta = a.meta || {};
                const attempts = Number(meta.retryCount || meta.retries || 0);
                all.push({ n: a.fullName || a.title || "", d: a.duration ?? null, r: attempts });
              }
            }
            const flaky = all.filter(t => (t.r||0) > 0).length;
            const slowest = all.filter(t => typeof t.d === "number").sort((a,b)=> (b.d||0)-(a.d||0)).slice(0,5);
            let out = "\n### Tests (from vitest JSON)\n";
            out += `- Flaky suspects (retries>0): ${flaky}\n`;
            if (slowest.length) {
              out += "- Slowest tests:\n";
              for (const t of slowest) out += `  - ${t.n} â€” ${t.d} ms\n`;
            }
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, out);
          ';
        fi
        # Cache summary if envs provided
        kinds=$(env | awk -F= '/^CACHE_[A-Z0-9]+_HIT=/{print $1}' | sed -E 's/^CACHE_([A-Z0-9]+)_HIT.*/\1/; s/.*/\L&/')
        if [ -n "${kinds}" ]; then
          hits=0; total=0; line_parts=""
          for k in $kinds; do
            v=$(eval echo "\$CACHE_${k^^}_HIT")
            total=$((total+1))
            if [ "$v" = "true" ] || [ "$v" = "1" ]; then
              hits=$((hits+1)); state=hit
            else
              state=miss
            fi
            if [ -z "$line_parts" ]; then line_parts="${k}: ${state}"; else line_parts="${line_parts}, ${k}: ${state}"; fi
          done
          echo "- Cache: ${hits}/${total} hits (${line_parts})" >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: Upload observability.json
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: observability
        path: ${{ env.OBS_FILE }}

branding:
  icon: bar-chart-2
  color: green
