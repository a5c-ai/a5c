name: "Observability Aggregate"
description: "Download workflow artifacts, aggregate coverage and test results, emit JSON and summary"
author: "a5c.ai"
runs:
  using: "composite"
  steps:
    - name: Create artifacts dir
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p artifacts

    - name: Download all artifacts for this run
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Aggregate coverage and junit
      id: aggregate
      shell: bash
      run: |
        set -euo pipefail
        OUT="observability.aggregate.json"
        echo "OUT=${OUT}" >> "$GITHUB_ENV"
        node -e '
          const fs = require("fs");
          const path = require("path");
          const base = path.resolve("artifacts");
          const exists = (p) => { try { fs.accessSync(p); return true; } catch { return false; } };
          let coverage = null;
          const covPaths = [
            path.join(base, "coverage", "coverage-summary.json"),
            path.join(base, "coverage", "coverage-summary.json"),
          ];
          for (const p of covPaths) { if (exists(p)) { try { coverage = JSON.parse(fs.readFileSync(p, "utf8")); break; } catch {} } }
          let junit = null;
          const junitPath = path.join(base, "vitest-junit", "junit.xml");
          if (exists(junitPath)) {
            const xml = fs.readFileSync(junitPath, "utf8");
            // very small parse to extract attributes from <testsuites ...>
            const m = xml.match(/<testsuites[^>]*tests=\"(\d+)\"[^>]*failures=\"(\d+)\"[^>]*errors=\"(\d+)\"/);
            if (m) junit = { tests: Number(m[1]), failures: Number(m[2]), errors: Number(m[3]) };
          }
          const sum = { coverage, junit };
          fs.writeFileSync("observability.aggregate.json", JSON.stringify(sum, null, 2));
        '

    - name: Step summary
      shell: bash
      run: |
        set -euo pipefail
        OUT="${OUT:-observability.aggregate.json}"
        echo "## Observability Aggregate" >> "$GITHUB_STEP_SUMMARY"
        if [ -f "$OUT" ]; then
          LINES=$(node -e "const s=require('fs').readFileSync('${OUT}','utf8'); const j=JSON.parse(s); const t=(j.coverage?.total)||{}; process.stdout.write((t.lines?.pct??0).toFixed(2))")
          FUNCS=$(node -e "const s=require('fs').readFileSync('${OUT}','utf8'); const j=JSON.parse(s); const t=(j.coverage?.total)||{}; process.stdout.write((t.functions?.pct??0).toFixed(2))")
          BR=$(node -e "const s=require('fs').readFileSync('${OUT}','utf8'); const j=JSON.parse(s); const t=(j.coverage?.total)||{}; process.stdout.write((t.branches?.pct??0).toFixed(2))")
          echo "- Coverage: lines ${LINES}% | funcs ${FUNCS}% | branches ${BR}%" >> "$GITHUB_STEP_SUMMARY"
          node -e "const j=require('./${OUT}'); if(j.junit){ console.log('- JUnit: tests '+j.junit.tests+' | failures '+j.junit.failures+' | errors '+j.junit.errors); }" >> "$GITHUB_STEP_SUMMARY" || true
        else
          echo "- No aggregate output found." >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: Upload aggregate artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: observability-aggregate
        path: ${{ env.OUT }}

branding:
  icon: bar-chart-2
  color: green
