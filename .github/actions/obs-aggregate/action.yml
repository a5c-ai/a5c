name: "Obs Aggregate"
description: "Download observability artifacts, merge, and upload aggregate JSON"
author: "a5c.ai"
inputs:
  artifact_name:
    description: "Artifact name to download"
    required: false
    default: "observability"
  output:
    description: "Output aggregate JSON path"
    required: false
    default: "observability.aggregate.json"
runs:
  using: "composite"
  steps:
    - name: Download observability artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        path: observability-artifacts
        merge-multiple: true
      continue-on-error: true

    - name: Merge observability JSON files
      id: merge
      shell: bash
      run: |
        set -euo pipefail
        OUT="${{ inputs.output }}"
        mkdir -p "$(dirname "$OUT")"
        files=( $(find observability-artifacts -type f -name '*.json' 2>/dev/null || true) )
        if [ ${#files[@]} -eq 0 ]; then
          echo '{}' > "$OUT"
          echo "No observability JSONs found; wrote empty object to $OUT" >> "$GITHUB_STEP_SUMMARY"
          exit 0
        fi
        node -e '
          const fs = require("fs");
          const glob = (p) => { try { return fs.readdirSync(p).map(f=>p+"/"+f); } catch { return []; } };
          const walk = (p) => {
            let res = [];
            try {
              for (const e of fs.readdirSync(p, { withFileTypes: true })) {
                const full = p + "/" + e.name;
                if (e.isDirectory()) res = res.concat(walk(full));
                else res.push(full);
              }
            } catch {}
            return res;
          };
          const outPath = process.env.OUT;
          const root = "observability-artifacts";
          const files = walk(root).filter(f => f.endsWith('.json'));
          const agg = {
            schema_version: "0.1",
            contributed: [],
            metrics: { cache: { summary: { bytes_restored_total: 0, hits: 0, misses: 0, total: 0 }, entries: [] } },
            runs: [],
          };
          let firstCoverage = null;
          for (const f of files) {
            let j = null; try { j = JSON.parse(fs.readFileSync(f, 'utf8')); } catch { continue; }
            agg.contributed.push(f);
            if (j?.metrics?.coverage && !firstCoverage) firstCoverage = j.metrics.coverage;
            if (j?.metrics?.cache?.entries?.length) {
              for (const e of j.metrics.cache.entries) agg.metrics.cache.entries.push(e);
            }
            if (j?.metrics?.cache?.summary) {
              const s = j.metrics.cache.summary;
              agg.metrics.cache.summary.bytes_restored_total += Number(s.bytes_restored_total||0);
              agg.metrics.cache.summary.hits += Number(s.hits||0);
              agg.metrics.cache.summary.misses += Number(s.misses||0);
              agg.metrics.cache.summary.total += Number(s.total||0);
            }
            if (j?.run) agg.runs.push(j.run);
          }
          if (firstCoverage) agg.metrics.coverage = firstCoverage;
          fs.writeFileSync(outPath, JSON.stringify(agg, null, 2));
        ' 
      env:
        OUT: ${{ inputs.output }}

    - name: Summary
      shell: bash
      run: |
        OUT="${{ inputs.output }}"
        echo "## Aggregate Observability" >> "$GITHUB_STEP_SUMMARY"
        echo "- Output: ${OUT}" >> "$GITHUB_STEP_SUMMARY"
        if [ -f "$OUT" ]; then
          BYTES=$(stat -c%s "$OUT" 2>/dev/null || stat -f%z "$OUT" 2>/dev/null || echo 0)
          echo "- Size: ${BYTES} bytes" >> "$GITHUB_STEP_SUMMARY"
          node -e '
            const fs = require("fs");
            try {
              const j = JSON.parse(fs.readFileSync(process.env.OUT,"utf8"));
              const cnt = Array.isArray(j.contributed) ? j.contributed.length : 0;
              const s = j?.metrics?.cache?.summary || {};
              console.log(`- Files: ${cnt}`);
              console.log(`- Cache: ${s.hits||0}/${s.total||0} hits, bytes ${s.bytes_restored_total||0}`);
            } catch {}
          ' OUT="$OUT" >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: Upload aggregate
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: observability.aggregate
        path: ${{ inputs.output }}

branding:
  icon: bar-chart-2
  color: blue

