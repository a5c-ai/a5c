name: "Aggregate Observability"
description: "Download artifacts, compute simple metrics, write summary + JSON"
author: a5c-ai/build-fixer-agent
inputs:
  obs_file:
    description: "Output JSON file path"
    required: false
    default: "observability-aggregated.json"
runs:
  using: "composite"
  steps:
    - name: Prepare directories
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p /tmp/obs-agg
        echo "OBS_FILE=${{ inputs.obs_file }}" >> "$GITHUB_ENV"
    - name: Download artifacts (best-effort)
      uses: actions/download-artifact@v4
      with:
        path: /tmp/obs-agg
        pattern: "*"
        merge-multiple: true
    - name: Aggregate and summarize
      shell: bash
      run: |
        set -euo pipefail
        node - <<'NODE'
        const fs = require('fs');
        const path = require('path');
        const root = '/tmp/obs-agg';
        const outFile = process.env.OBS_FILE || 'observability-aggregated.json';
        const summaryFile = process.env.GITHUB_STEP_SUMMARY;
        function exists(p){ try { fs.accessSync(p); return true; } catch { return false; } }
        function findFirst(candidates){ for (const p of candidates){ if (exists(p)) return p; } return null; }
        const results = {
          schema_version: '0.1',
          collected_at: new Date().toISOString(),
          artifacts: { present: [], missing: [] },
          metrics: { coverage: null },
        };
        const expected = [
          'coverage/coverage-summary.json',
          'coverage/lcov.info',
          'junit.xml',
          'vitest-results.json',
          'observability.json',
        ];
        for (const rel of expected){
          const p = path.join(root, rel);
          if (exists(p)) results.artifacts.present.push(rel); else results.artifacts.missing.push(rel);
        }
        // Parse coverage summary if present
        const covPath = findFirst([
          path.join(root, 'coverage/coverage-summary.json'),
          path.join(root, 'coverage-summary.json'),
        ]);
        if (covPath){
          try {
            const sum = JSON.parse(fs.readFileSync(covPath,'utf8'));
            const t = sum.total || {};
            results.metrics.coverage = {
              lines: Number(((t.lines?.pct ?? 0)).toFixed(2)),
              branches: Number(((t.branches?.pct ?? 0)).toFixed(2)),
              functions: Number(((t.functions?.pct ?? 0)).toFixed(2)),
              statements: Number(((t.statements?.pct ?? 0)).toFixed(2)),
            };
          } catch (e) {
            results.metrics.coverage = { error: String(e) };
          }
        }
        // Persist JSON
        fs.writeFileSync(outFile, JSON.stringify(results, null, 2));
        // Append summary
        const lines = [];
        lines.push('## Observability Aggregate');
        lines.push('');
        lines.push(`Artifacts directory: ${root}`);
        lines.push('');
        lines.push('| Artifact | Status |');
        lines.push('|---|---|');
        for (const rel of results.artifacts.present){ lines.push(`| ${rel} | present |`); }
        for (const rel of results.artifacts.missing){ lines.push(`| ${rel} | missing |`); }
        lines.push('');
        if (results.metrics.coverage && !results.metrics.coverage.error){
          const c = results.metrics.coverage;
          lines.push('| Metric | Percent |');
          lines.push('|---|---:|');
          lines.push(`| Lines | ${c.lines}% |`);
          lines.push(`| Branches | ${c.branches}% |`);
          lines.push(`| Functions | ${c.functions}% |`);
          lines.push(`| Statements | ${c.statements}% |`);
          lines.push('');
        }
        if (summaryFile) fs.appendFileSync(summaryFile, lines.join('\n'));
        NODE
    - name: Upload aggregated JSON
      uses: actions/upload-artifact@v4
      with:
        name: observability-aggregated
        path: ${{ inputs.obs_file }}
        if-no-files-found: warn
