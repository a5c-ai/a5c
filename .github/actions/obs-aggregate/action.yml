name: "Observability Aggregate"
description: "Download all artifacts, summarize coverage/JUnit across jobs, write summary and aggregated JSON, upload artifact"
author: "a5c.ai"
runs:
  using: "composite"
  steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Aggregate coverage and JUnit
      shell: bash
      run: |
        set -euo pipefail
        OUT_JSON="${OUT_JSON:-observability.aggregate.json}"
        mkdir -p artifacts || true
        # Find coverage summaries and junit reports
        mapfile -t COVS < <(find artifacts -type f -name 'coverage-summary.json' 2>/dev/null || true)
        mapfile -t JUNIT < <(find artifacts -type f -name '*.xml' -maxdepth 3 -printf '%p\n' 2>/dev/null | grep -E '/junit\.xml$' || true)
        printf "%s\n" "${COVS[@]:-}" > /tmp/obs_covs.txt || true
        printf "%s\n" "${JUNIT[@]:-}" > /tmp/obs_junit.txt || true
        LINES=0 FUNCS=0 BRANCHES=0 COUNT=0
        if [ ${#COVS[@]} -gt 0 ]; then
          for f in "${COVS[@]}"; do
            l=$(node -e "const t=require('fs').existsSync(process.argv[1])?JSON.parse(require('fs').readFileSync(process.argv[1],'utf8')).total||{}:{}; console.log(Number((t.lines?.pct??0)))" "$f")
            fn=$(node -e "const t=require('fs').existsSync(process.argv[1])?JSON.parse(require('fs').readFileSync(process.argv[1],'utf8')).total||{}:{}; console.log(Number((t.functions?.pct??0)))" "$f")
            br=$(node -e "const t=require('fs').existsSync(process.argv[1])?JSON.parse(require('fs').readFileSync(process.argv[1],'utf8')).total||{}:{}; console.log(Number((t.branches?.pct??0)))" "$f")
            LINES=$(awk -v a="$LINES" -v b="$l" 'BEGIN{print a+b}')
            FUNCS=$(awk -v a="$FUNCS" -v b="$fn" 'BEGIN{print a+b}')
            BRANCHES=$(awk -v a="$BRANCHES" -v b="$br" 'BEGIN{print a+b}')
            COUNT=$((COUNT+1))
          done
        fi
        avg() { if [ "$2" -gt 0 ]; then awk -v s="$1" -v n="$2" 'BEGIN{printf "%.2f", s/n}'; else echo 0; fi; }
        LINES_A=$(avg "$LINES" "$COUNT")
        FUNCS_A=$(avg "$FUNCS" "$COUNT")
        BRANCHES_A=$(avg "$BRANCHES" "$COUNT")
        node -e '
          const fs = require("fs");
          const OUT = process.env.OUT_JSON || "observability.aggregate.json";
          const readList = (p) => {
            try { return fs.readFileSync(p, "utf8").split(/\r?\n/).filter(Boolean); } catch { return []; }
          };
          const cov_files = readList("/tmp/obs_covs.txt");
          const junit_files = readList("/tmp/obs_junit.txt");
          const num = (k) => Number(process.env[k] || 0);
          const agg = {
            artifacts_root: "artifacts",
            found: {
              coverage_summaries: cov_files,
              junit_reports: junit_files,
            },
            metrics: {
              coverage_avg: {
                lines_pct: num("LINES_A"),
                functions_pct: num("FUNCS_A"),
                branches_pct: num("BRANCHES_A"),
                files_count: num("COUNT"),
              },
              cache: {}
            }
          };
          fs.writeFileSync(OUT, JSON.stringify(agg, null, 2));
          console.log(`Wrote ${OUT}`);
        ' 

    - name: Step summary
      shell: bash
      run: |
        set -euo pipefail
        OUT_JSON="${OUT_JSON:-observability.aggregate.json}"
        echo "## Aggregate Observability" >> "$GITHUB_STEP_SUMMARY"
        if [ -f "$OUT_JSON" ]; then
          echo '\n```json' >> "$GITHUB_STEP_SUMMARY"
          head -c 5000 "$OUT_JSON" >> "$GITHUB_STEP_SUMMARY" || true
          echo '\n```' >> "$GITHUB_STEP_SUMMARY"
        else
          echo "No aggregate JSON produced." >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: Upload aggregate
      uses: actions/upload-artifact@v4
      with:
        name: observability-aggregate
        path: observability.aggregate.json

branding:
  icon: bar-chart
  color: purple
