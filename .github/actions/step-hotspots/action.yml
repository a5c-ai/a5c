name: "Step Hotspots"
description: "Summarize step durations, annotate slow steps, and report p95"
author: "a5c.ai"
runs:
  using: "composite"
  steps:
    - name: Analyze timings and annotate
      id: analyze
      shell: bash
      env:
        FILE: ${{ inputs.file }}
        TOP_N: ${{ inputs.top_n }}
        WARN_MS: ${{ inputs.warn_ms }}
        ERROR_MS: ${{ inputs.error_ms }}
        SUMMARY_TITLE: ${{ inputs.summary_title }}
      run: |
        set -euo pipefail
        FILE="${FILE:-hotspots.jsonl}"
        TOP_N="${TOP_N:-5}"
        WARN_MS="${WARN_MS:-60000}"       # default warn at 60s
        ERROR_MS="${ERROR_MS:-300000}"    # default error at 5m
        SUMMARY_TITLE="${SUMMARY_TITLE:-Step Hotspots}"

        # Read steps data supporting JSON, JSON Lines, or {steps:[...]}
        node -e '
          const fs = require("fs");
          const path = process.env.FILE || "hotspots.jsonl";
          /** @type {{name:string, duration_ms:number}[]} */
          let steps = [];
          if (fs.existsSync(path)) {
            const raw = fs.readFileSync(path, "utf8");
            try {
              const data = JSON.parse(raw);
              if (Array.isArray(data)) steps = data;
              else if (Array.isArray(data.steps)) steps = data.steps;
            } catch {
              // try JSONL
              steps = raw.split(/\r?\n/).map(l => l.trim()).filter(Boolean).map(l => JSON.parse(l));
            }
          }
          // sanitize
          steps = steps
            .filter(s => s && typeof s.name === "string" && Number.isFinite(Number(s.duration_ms)))
            .map(s => ({ name: s.name, duration_ms: Number(s.duration_ms) }))
            .filter(s => s.duration_ms >= 0);
          steps.sort((a,b) => b.duration_ms - a.duration_ms);
          const durations = steps.map(s => s.duration_ms);
          let p95 = null;
          if (durations.length) {
            const rank = Math.ceil(0.95 * durations.length);
            p95 = durations[Math.min(rank - 1, durations.length - 1)] ?? null;
          }
          const out = { steps, p95 };
          process.stdout.write(JSON.stringify(out));
        ' > /tmp/_hotspots.json

        TOP_N=${TOP_N:-5}
        WARN_MS=${WARN_MS:-60000}
        ERROR_MS=${ERROR_MS:-300000}

        P95=$(jq -r '.p95 // ""' /tmp/_hotspots.json)
        echo "p95_ms=${P95}" >> "$GITHUB_OUTPUT"

        echo "## ${SUMMARY_TITLE}" >> "$GITHUB_STEP_SUMMARY"
        if [ -n "$P95" ]; then
          echo "- p95 duration: ${P95} ms" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "- p95 duration: n/a" >> "$GITHUB_STEP_SUMMARY"
        fi

        # Prepare table
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "| Step | Duration | Status |" >> "$GITHUB_STEP_SUMMARY"
        echo "|---|---:|---|" >> "$GITHUB_STEP_SUMMARY"
        jq -r --argjson warn "$WARN_MS" --argjson err "$ERROR_MS" --argjson top "$TOP_N" '
          .steps | .[0:($top|tonumber)] | map(. + {
            status: (if .duration_ms >= $err then "error"
                     elif .duration_ms >= $warn then "warn"
                     else "ok" end)
          }) | .[] | "| \(.name) | \(.duration_ms) ms | \(.status) |"' /tmp/_hotspots.json >> "$GITHUB_STEP_SUMMARY" || true

        # Emit annotations for slow steps (no file/line context; step name only)
        while IFS=$'\t' read -r status name dur; do
          case "$status" in
            error)
              echo "::error title=Slow step (>${ERROR_MS} ms)::${name} took ${dur} ms";;
            warn)
              echo "::warning title=Slow step (>${WARN_MS} ms)::${name} took ${dur} ms";;
          esac
        done < <(
          jq -r --argjson warn "$WARN_MS" --argjson err "$ERROR_MS" --argjson top "$TOP_N" '
            .steps | .[0:($top|tonumber)] | map(. + {
              status: (if .duration_ms >= $err then "error"
                       elif .duration_ms >= $warn then "warn"
                       else "ok" end)
            }) | .[] | select(.status != "ok") | "\(.status)\t\(.name)\t\(.duration_ms)"' /tmp/_hotspots.json
        )

    - name: Upload hotspots artifact
      if: inputs.upload_artifact == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: hotspots
        path: ${{ inputs.file || 'hotspots.jsonl' }}

inputs:
  file:
    description: "Path to timings file (JSON, JSONL, or {steps:[...]})"
    required: false
    default: hotspots.jsonl
  top_n:
    description: "Number of top slow steps to consider"
    required: false
    default: "5"
  warn_ms:
    description: "Warn threshold in milliseconds"
    required: false
    default: "60000"
  error_ms:
    description: "Error threshold in milliseconds"
    required: false
    default: "300000"
  upload_artifact:
    description: "Whether to upload the timings file as an artifact"
    required: false
    default: "false"
  summary_title:
    description: "Custom title for the summary section"
    required: false
    default: "Step Hotspots"

outputs:
  p95_ms:
    description: "Computed p95 duration across steps (ms)"
    value: ${{ steps.analyze.outputs.p95_ms }}

branding:
  icon: activity
  color: orange
