<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="105" failures="0" errors="0" time="9.286">
    <testsuite name="tests/cli.enrich.flags.test.ts" timestamp="2025-09-15T04:20:34.607Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="3.045416161">
        <testcase classname="tests/cli.enrich.flags.test.ts" name="enrich flags: include_patch &gt; include_patch=true keeps patch fields (when files exist)" time="1.541892505">
        </testcase>
        <testcase classname="tests/cli.enrich.flags.test.ts" name="enrich flags: include_patch &gt; include_patch=false removes patch fields (when files exist)" time="1.501894964">
        </testcase>
    </testsuite>
    <testsuite name="tests/cli.enrich.test.ts" timestamp="2025-09-15T04:20:34.608Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="0.602039236">
        <testcase classname="tests/cli.enrich.test.ts" name="CLI enrich (smoke) &gt; reads a sample and outputs enriched event shape" time="0.600296666">
        </testcase>
    </testsuite>
    <testsuite name="tests/cli.exit-codes.test.ts" timestamp="2025-09-15T04:20:34.608Z" hostname="runnervmf4ws1" tests="4" failures="0" errors="0" skipped="0" time="1.97086714">
        <testcase classname="tests/cli.exit-codes.test.ts" name="CLI exit codes &gt; normalize: exits 2 when --in is missing (source=cli)" time="0.509289897">
        </testcase>
        <testcase classname="tests/cli.exit-codes.test.ts" name="CLI exit codes &gt; normalize: exits 2 on invalid JSON input" time="0.442998999">
        </testcase>
        <testcase classname="tests/cli.exit-codes.test.ts" name="CLI exit codes &gt; enrich: exits 3 when --use-github is set but no token (provider failure)" time="0.445553141">
        </testcase>
        <testcase classname="tests/cli.exit-codes.test.ts" name="CLI exit codes &gt; enrich: exits 0 without --use-github even when no token" time="0.571287512">
        </testcase>
    </testsuite>
    <testsuite name="tests/cli.normalize.test.ts" timestamp="2025-09-15T04:20:34.609Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="0.557229298">
        <testcase classname="tests/cli.normalize.test.ts" name="CLI normalize (smoke) &gt; reads a sample and outputs normalized event shape" time="0.555188811">
        </testcase>
    </testsuite>
    <testsuite name="tests/cli.readme.examples.test.ts" timestamp="2025-09-15T04:20:34.610Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="0.343719127">
        <testcase classname="tests/cli.readme.examples.test.ts" name="README examples &gt; normalizes sample workflow_run and writes out.json" time="0.160792534">
        </testcase>
        <testcase classname="tests/cli.readme.examples.test.ts" name="README examples &gt; extracts mentions from stdin" time="0.18108505">
        </testcase>
    </testsuite>
    <testsuite name="tests/cli.rules-composed.test.ts" timestamp="2025-09-15T04:20:34.610Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="0.57565957">
        <testcase classname="tests/cli.rules-composed.test.ts" name="CLI enrich with --rules emits composed events &gt; produces composed[].key from YAML rules" time="0.574324819">
        </testcase>
    </testsuite>
    <testsuite name="tests/cli.select-filter.e2e.test.ts" timestamp="2025-09-15T04:20:34.611Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="1.211609799">
        <testcase classname="tests/cli.select-filter.e2e.test.ts" name="CLI select/filter &gt; normalize --select type,repo.full_name" time="0.595399111">
        </testcase>
        <testcase classname="tests/cli.select-filter.e2e.test.ts" name="CLI select/filter &gt; enrich --filter enriched.github.pr.mergeable_state=dirty (may be filtered depending on enrichment)" time="0.614171998">
        </testcase>
    </testsuite>
    <testsuite name="tests/cli.select-filter.test.ts" timestamp="2025-09-15T04:20:34.611Z" hostname="runnervmf4ws1" tests="5" failures="0" errors="0" skipped="0" time="0.034430973">
        <testcase classname="tests/cli.select-filter.test.ts" name="select/filter utilities &gt; selectFields builds nested output" time="0.002766281">
        </testcase>
        <testcase classname="tests/cli.select-filter.test.ts" name="select/filter utilities &gt; parseFilter handles equals and presence" time="0.000593605">
        </testcase>
        <testcase classname="tests/cli.select-filter.test.ts" name="select/filter utilities &gt; passesFilter works" time="0.000728427">
        </testcase>
        <testcase classname="tests/cli.select-filter.test.ts" name="select/filter integration with handlers &gt; normalize + select produces only requested fields" time="0.001568972">
        </testcase>
        <testcase classname="tests/cli.select-filter.test.ts" name="select/filter integration with handlers &gt; enrich + filter blocks when not matching" time="0.026808296">
        </testcase>
    </testsuite>
    <testsuite name="tests/cli.validate.test.ts" timestamp="2025-09-15T04:20:34.612Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="0.518386282">
        <testcase classname="tests/cli.validate.test.ts" name="events validate (CLI) &gt; validates a normalized sample and returns valid: true" time="0.28984211">
        </testcase>
        <testcase classname="tests/cli.validate.test.ts" name="events validate (CLI) &gt; reports errors for invalid payload" time="0.226949718">
        </testcase>
    </testsuite>
    <testsuite name="tests/composed.rules.test.ts" timestamp="2025-09-15T04:20:34.613Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="0.044803281">
        <testcase classname="tests/composed.rules.test.ts" name="composed events via rules &gt; emits composed event with key and targets from YAML rules" time="0.041961878">
        </testcase>
    </testsuite>
    <testsuite name="tests/config.token-precedence.test.ts" timestamp="2025-09-15T04:20:34.613Z" hostname="runnervmf4ws1" tests="3" failures="0" errors="0" skipped="0" time="0.004996865">
        <testcase classname="tests/config.token-precedence.test.ts" name="config token precedence &gt; prefers A5C_AGENT_GITHUB_TOKEN over GITHUB_TOKEN when both set" time="0.00240817">
        </testcase>
        <testcase classname="tests/config.token-precedence.test.ts" name="config token precedence &gt; falls back to GITHUB_TOKEN when agent token missing" time="0.000407298">
        </testcase>
        <testcase classname="tests/config.token-precedence.test.ts" name="config token precedence &gt; is undefined when neither token is present" time="0.000337178">
        </testcase>
    </testsuite>
    <testsuite name="tests/config.token.test.ts" timestamp="2025-09-15T04:20:34.614Z" hostname="runnervmf4ws1" tests="4" failures="0" errors="0" skipped="0" time="0.015085177">
        <testcase classname="tests/config.token.test.ts" name="config.loadConfig token precedence and debug parsing &gt; githubToken is undefined when no env tokens provided" time="0.009965027">
        </testcase>
        <testcase classname="tests/config.token.test.ts" name="config.loadConfig token precedence and debug parsing &gt; uses GITHUB_TOKEN when only GITHUB_TOKEN is set" time="0.001325895">
        </testcase>
        <testcase classname="tests/config.token.test.ts" name="config.loadConfig token precedence and debug parsing &gt; prefers A5C_AGENT_GITHUB_TOKEN over GITHUB_TOKEN when both set" time="0.00115114">
        </testcase>
        <testcase classname="tests/config.token.test.ts" name="config.loadConfig token precedence and debug parsing &gt; parses DEBUG only when equals &quot;true&quot; (case-insensitive)" time="0.001313432">
        </testcase>
    </testsuite>
    <testsuite name="tests/emit.basic.test.ts" timestamp="2025-09-15T04:20:34.615Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="0.008323207">
        <testcase classname="tests/emit.basic.test.ts" name="handleEmit &gt; writes to stdout by default and returns code 0" time="0.005127491">
        </testcase>
        <testcase classname="tests/emit.basic.test.ts" name="handleEmit &gt; writes to file sink when out is provided" time="0.001632047">
        </testcase>
    </testsuite>
    <testsuite name="tests/enrich.basic.test.ts" timestamp="2025-09-15T04:20:34.615Z" hostname="runnervmf4ws1" tests="9" failures="0" errors="0" skipped="0" time="1.584556641">
        <testcase classname="tests/enrich.basic.test.ts" name="handleEnrich &gt; propagates flags and wraps metadata under enriched" time="0.05563949">
        </testcase>
        <testcase classname="tests/enrich.basic.test.ts" name="handleEnrich &gt; adds mentions from push commit messages" time="0.001973646">
        </testcase>
        <testcase classname="tests/enrich.basic.test.ts" name="handleEnrich &gt; omits patch fields by default (include_patch=false)" time="0.000651253">
        </testcase>
        <testcase classname="tests/enrich.basic.test.ts" name="handleEnrich &gt; merges GitHub enrichment when flag enabled but missing token marks partial/skipped" time="0.000596491">
        </testcase>
        <testcase classname="tests/enrich.basic.test.ts" name="handleEnrich &gt; does not perform GitHub enrichment when --use-github is not set (offline mode)" time="0.002646326">
        </testcase>
        <testcase classname="tests/enrich.basic.test.ts" name="handleEnrich &gt; includes patch fields when explicitly enabled (include_patch=true)" time="0.000494711">
        </testcase>
        <testcase classname="tests/enrich.basic.test.ts" name="handleEnrich &gt; adds code_comment mentions when enrichment contains files" time="1.507260667">
        </testcase>
        <testcase classname="tests/enrich.basic.test.ts" name="handleEnrich &gt; when --use-github is requested, API failures return code 3; if token present, enrichment succeeds" time="0.000521591">
        </testcase>
        <testcase classname="tests/enrich.basic.test.ts" name="handleEnrich &gt; applies YAML rules and emits composed events" time="0.012770816">
        </testcase>
    </testsuite>
    <testsuite name="tests/enrich.flags.test.ts" timestamp="2025-09-15T04:20:34.617Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="3.055929692">
        <testcase classname="tests/enrich.flags.test.ts" name="enrich flags: include_patch default and override &gt; default include_patch=false removes patch from files (when files exist)" time="1.550663837">
        </testcase>
        <testcase classname="tests/enrich.flags.test.ts" name="enrich flags: include_patch default and override &gt; include_patch=true preserves patch in files (when files exist)" time="1.503220678">
        </testcase>
    </testsuite>
    <testsuite name="tests/enrich.handle.test.ts" timestamp="2025-09-15T04:20:34.617Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="1.550319883">
        <testcase classname="tests/enrich.handle.test.ts" name="handleEnrich integrates enrichGithubEvent &gt; maps PR enrichment under enriched.github and respects include_patch=false" time="1.548525416">
        </testcase>
    </testsuite>
    <testsuite name="tests/enrich.redaction.test.ts" timestamp="2025-09-15T04:20:34.618Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="0.046368324">
        <testcase classname="tests/enrich.redaction.test.ts" name="enrich() output is redacted &gt; applies redaction to output object" time="0.044560109">
        </testcase>
    </testsuite>
    <testsuite name="tests/enrichGithubEvent.test.ts" timestamp="2025-09-15T04:20:34.618Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="0.01118434">
        <testcase classname="tests/enrichGithubEvent.test.ts" name="enrichGithubEvent (GitHub provider) &gt; PR enrichment adds pr fields and owners" time="0.008530748">
        </testcase>
        <testcase classname="tests/enrichGithubEvent.test.ts" name="enrichGithubEvent (GitHub provider) &gt; Push enrichment adds commits and files" time="0.000827572">
        </testcase>
    </testsuite>
    <testsuite name="tests/golden.enrich.test.ts" timestamp="2025-09-15T04:20:34.618Z" hostname="runnervmf4ws1" tests="4" failures="0" errors="0" skipped="0" time="0.058540289">
        <testcase classname="tests/golden.enrich.test.ts" name="golden enrich &gt; matches workflow_run.completed.enrich.json" time="0.051254863">
        </testcase>
        <testcase classname="tests/golden.enrich.test.ts" name="golden enrich &gt; matches pull_request.synchronize.enrich.json" time="0.002121197">
        </testcase>
        <testcase classname="tests/golden.enrich.test.ts" name="golden enrich &gt; matches push.enrich.json" time="0.001452753">
        </testcase>
        <testcase classname="tests/golden.enrich.test.ts" name="golden enrich &gt; matches issue_comment.created.enrich.json" time="0.00179486">
        </testcase>
    </testsuite>
    <testsuite name="tests/golden.normalize.test.ts" timestamp="2025-09-15T04:20:34.619Z" hostname="runnervmf4ws1" tests="4" failures="0" errors="0" skipped="0" time="0.013013414">
        <testcase classname="tests/golden.normalize.test.ts" name="golden normalize &gt; matches workflow_run.completed.normalize.json" time="0.006559185">
        </testcase>
        <testcase classname="tests/golden.normalize.test.ts" name="golden normalize &gt; matches pull_request.synchronize.normalize.json" time="0.001888764">
        </testcase>
        <testcase classname="tests/golden.normalize.test.ts" name="golden normalize &gt; matches push.normalize.json" time="0.001291122">
        </testcase>
        <testcase classname="tests/golden.normalize.test.ts" name="golden normalize &gt; matches issue_comment.created.normalize.json" time="0.001249686">
        </testcase>
    </testsuite>
    <testsuite name="tests/mentions-code-comments.spec.ts" timestamp="2025-09-15T04:20:34.620Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="0.007978746">
        <testcase classname="tests/mentions-code-comments.spec.ts" name="code comment mentions &gt; parses added lines with numbers" time="0.003107312">
        </testcase>
        <testcase classname="tests/mentions-code-comments.spec.ts" name="code comment mentions &gt; extracts mentions from js/ts comment lines" time="0.002950349">
        </testcase>
    </testsuite>
    <testsuite name="tests/mentions.code-comments.test.ts" timestamp="2025-09-15T04:20:34.621Z" hostname="runnervmf4ws1" tests="8" failures="0" errors="0" skipped="0" time="0.012986195">
        <testcase classname="tests/mentions.code-comments.test.ts" name="mentions extractor - code comments scanning (local content) &gt; finds @developer-agent in JS line comment" time="0.004732901">
        </testcase>
        <testcase classname="tests/mentions.code-comments.test.ts" name="mentions extractor - code comments scanning (local content) &gt; does not match inside code strings for JS when not in comments" time="0.000320627">
        </testcase>
        <testcase classname="tests/mentions.code-comments.test.ts" name="mentions extractor - code comments scanning (local content) &gt; respects language filter" time="0.000844927">
        </testcase>
        <testcase classname="tests/mentions.code-comments.test.ts" name="mentions extractor - code comments scanning (local content) &gt; skips large files over byte cap" time="0.000536529">
        </testcase>
        <testcase classname="tests/mentions.code-comments.test.ts" name="code comment mention scanning (octokit-backed) &gt; finds mentions in JS/TS line and block comments with locations" time="0.002114608">
        </testcase>
        <testcase classname="tests/mentions.code-comments.test.ts" name="code comment mention scanning (octokit-backed) &gt; finds mentions in README markdown lines" time="0.00072518">
        </testcase>
        <testcase classname="tests/mentions.code-comments.test.ts" name="code comment mention scanning (octokit-backed) &gt; skips large files over size cap" time="0.001066607">
        </testcase>
        <testcase classname="tests/mentions.code-comments.test.ts" name="enrich() integration — uses patch content for changed files &gt; adds code_comment mentions from PR files when patch includes comment with @mention" time="0.000438446">
        </testcase>
    </testsuite>
    <testsuite name="tests/mentions.commit.test.ts" timestamp="2025-09-15T04:20:34.622Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="0.004353771">
        <testcase classname="tests/mentions.commit.test.ts" name="mentions extractor - commit messages &gt; extracts simple @agent mention" time="0.002703851">
        </testcase>
    </testsuite>
    <testsuite name="tests/mentions.pr-body.test.ts" timestamp="2025-09-15T04:20:34.622Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="0.006874922">
        <testcase classname="tests/mentions.pr-body.test.ts" name="mentions extractor - PR body &gt; extracts multiple mentions with context" time="0.004294551">
        </testcase>
        <testcase classname="tests/mentions.pr-body.test.ts" name="mentions extractor - PR body &gt; extracts from PR title as pr_title source (issue #250)" time="0.000646573">
        </testcase>
    </testsuite>
    <testsuite name="tests/mentions.pr-title.test.ts" timestamp="2025-09-15T04:20:34.623Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="0.052037622">
        <testcase classname="tests/mentions.pr-title.test.ts" name="mentions extractor - PR title &gt; extracts an @mention from PR title with correct source and normalization" time="0.050108643">
        </testcase>
    </testsuite>
    <testsuite name="tests/ne.schema.compile.test.ts" timestamp="2025-09-15T04:20:34.623Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="0.032038586">
        <testcase classname="tests/ne.schema.compile.test.ts" name="NE schema &gt; compiles with Ajv" time="0.030710888">
        </testcase>
    </testsuite>
    <testsuite name="tests/ne.zod.schema.test.ts" timestamp="2025-09-15T04:20:34.623Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="0.006793921">
        <testcase classname="tests/ne.zod.schema.test.ts" name="NE Zod schema &gt; parses a normalized sample (workflow_run)" time="0.004115127">
        </testcase>
        <testcase classname="tests/ne.zod.schema.test.ts" name="NE Zod schema &gt; rejects invalid provider" time="0.001166991">
        </testcase>
    </testsuite>
    <testsuite name="tests/normalize.basic.test.ts" timestamp="2025-09-15T04:20:34.624Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="0.006323997">
        <testcase classname="tests/normalize.basic.test.ts" name="handleNormalize &gt; produces minimal NormalizedEvent with payload and provenance" time="0.004592636">
        </testcase>
    </testsuite>
    <testsuite name="tests/normalize.github.test.ts" timestamp="2025-09-15T04:20:34.624Z" hostname="runnervmf4ws1" tests="4" failures="0" errors="0" skipped="0" time="0.006178296">
        <testcase classname="tests/normalize.github.test.ts" name="GitHub normalization &gt; workflow_run -&gt; NE fields" time="0.002884633">
        </testcase>
        <testcase classname="tests/normalize.github.test.ts" name="GitHub normalization &gt; pull_request -&gt; NE fields" time="0.000706075">
        </testcase>
        <testcase classname="tests/normalize.github.test.ts" name="GitHub normalization &gt; push -&gt; NE fields" time="0.000634281">
        </testcase>
        <testcase classname="tests/normalize.github.test.ts" name="GitHub normalization &gt; issue_comment -&gt; NE fields" time="0.000595359">
        </testcase>
    </testsuite>
    <testsuite name="tests/normalize.schema.test.ts" timestamp="2025-09-15T04:20:34.625Z" hostname="runnervmf4ws1" tests="4" failures="0" errors="0" skipped="0" time="0.00567996">
        <testcase classname="tests/normalize.schema.test.ts" name="normalize → NE schema shape (smoke) &gt; workflow_run sample produces required fields" time="0.002695602">
        </testcase>
        <testcase classname="tests/normalize.schema.test.ts" name="normalize → NE schema shape (smoke) &gt; pull_request sample sets ref base/head and labels preserved" time="0.000538472">
        </testcase>
        <testcase classname="tests/normalize.schema.test.ts" name="normalize → NE schema shape (smoke) &gt; push sample sets branch ref and sha" time="0.000401406">
        </testcase>
        <testcase classname="tests/normalize.schema.test.ts" name="normalize → NE schema shape (smoke) &gt; issue_comment sample sets type and actor" time="0.000323772">
        </testcase>
    </testsuite>
    <testsuite name="tests/normalize.test.ts" timestamp="2025-09-15T04:20:34.626Z" hostname="runnervmf4ws1" tests="4" failures="0" errors="0" skipped="0" time="0.007856462">
        <testcase classname="tests/normalize.test.ts" name="normalize() &gt; workflow_run sample validates" time="0.004855984">
        </testcase>
        <testcase classname="tests/normalize.test.ts" name="normalize() &gt; pull_request sample validates" time="0.000471038">
        </testcase>
        <testcase classname="tests/normalize.test.ts" name="normalize() &gt; push sample validates" time="0.000422847">
        </testcase>
        <testcase classname="tests/normalize.test.ts" name="normalize() &gt; issue_comment sample validates" time="0.000365741">
        </testcase>
    </testsuite>
    <testsuite name="tests/redact.patterns.test.ts" timestamp="2025-09-15T04:20:34.627Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="0.005092797">
        <testcase classname="tests/redact.patterns.test.ts" name="redactString – additional patterns &gt; redacts URL basic auth credentials" time="0.002850053">
        </testcase>
        <testcase classname="tests/redact.patterns.test.ts" name="redactString – additional patterns &gt; redacts Slack tokens" time="0.00051594">
        </testcase>
    </testsuite>
    <testsuite name="tests/redaction.regression.test.ts" timestamp="2025-09-15T04:20:34.627Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="0.006446285">
        <testcase classname="tests/redaction.regression.test.ts" name="redaction regression &gt; masks multiple secret types in a single string" time="0.003240094">
        </testcase>
        <testcase classname="tests/redaction.regression.test.ts" name="redaction regression &gt; masks nested structures and preserves safe fields" time="0.001346263">
        </testcase>
    </testsuite>
    <testsuite name="tests/rules.composed.test.ts" timestamp="2025-09-15T04:20:34.628Z" hostname="runnervmf4ws1" tests="2" failures="0" errors="0" skipped="0" time="0.036913546">
        <testcase classname="tests/rules.composed.test.ts" name="rules composed events &gt; emits composed event for conflicted low-priority PR" time="0.034066444">
        </testcase>
        <testcase classname="tests/rules.composed.test.ts" name="rules composed events &gt; does not emit when conditions not met" time="0.00114906">
        </testcase>
    </testsuite>
    <testsuite name="test/config.loadConfig.test.ts" timestamp="2025-09-15T04:20:34.628Z" hostname="runnervmf4ws1" tests="3" failures="0" errors="0" skipped="0" time="0.006726095">
        <testcase classname="test/config.loadConfig.test.ts" name="loadConfig token precedence &gt; returns undefined when neither token is set" time="0.002414559">
        </testcase>
        <testcase classname="test/config.loadConfig.test.ts" name="loadConfig token precedence &gt; uses GITHUB_TOKEN when only it is set" time="0.001750755">
        </testcase>
        <testcase classname="test/config.loadConfig.test.ts" name="loadConfig token precedence &gt; prefers A5C_AGENT_GITHUB_TOKEN over GITHUB_TOKEN when both set" time="0.000471036">
        </testcase>
    </testsuite>
    <testsuite name="test/config.precedence.test.ts" timestamp="2025-09-15T04:20:34.629Z" hostname="runnervmf4ws1" tests="4" failures="0" errors="0" skipped="0" time="0.005202382">
        <testcase classname="test/config.precedence.test.ts" name="config token precedence &gt; prefers A5C_AGENT_GITHUB_TOKEN over GITHUB_TOKEN" time="0.002254992">
        </testcase>
        <testcase classname="test/config.precedence.test.ts" name="config token precedence &gt; falls back to GITHUB_TOKEN when A5C token missing" time="0.000373093">
        </testcase>
        <testcase classname="test/config.precedence.test.ts" name="config token precedence &gt; returns undefined when no token env provided" time="0.000322609">
        </testcase>
        <testcase classname="test/config.precedence.test.ts" name="config token precedence &gt; parses DEBUG env to boolean" time="0.000389194">
        </testcase>
    </testsuite>
    <testsuite name="test/enrich.redaction.test.ts" timestamp="2025-09-15T04:20:34.629Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="0.05056485">
        <testcase classname="test/enrich.redaction.test.ts" name="enrich output redaction &gt; masks token-like strings in enriched metadata and fields" time="0.04873628">
        </testcase>
    </testsuite>
    <testsuite name="test/redact.test.ts" timestamp="2025-09-15T04:20:34.630Z" hostname="runnervmf4ws1" tests="7" failures="0" errors="0" skipped="0" time="0.006467354">
        <testcase classname="test/redact.test.ts" name="redaction &gt; masks GitHub PAT in string" time="0.001857774">
        </testcase>
        <testcase classname="test/redact.test.ts" name="redaction &gt; masks JWT in string" time="0.000426693">
        </testcase>
        <testcase classname="test/redact.test.ts" name="redaction &gt; masks sensitive keys in objects" time="0.001018324">
        </testcase>
        <testcase classname="test/redact.test.ts" name="redaction &gt; masks bearer tokens in non-sensitive keys but preserves others" time="0.000249924">
        </testcase>
        <testcase classname="test/redact.test.ts" name="redaction &gt; masks env-like object values" time="0.000258611">
        </testcase>
        <testcase classname="test/redact.test.ts" name="redaction &gt; masks Slack/AWS/Basic Auth patterns in strings" time="0.000483048">
        </testcase>
        <testcase classname="test/redact.test.ts" name="redaction &gt; masks representative fixture payload values" time="0.000788145">
        </testcase>
    </testsuite>
    <testsuite name="test/sum.test.ts" timestamp="2025-09-15T04:20:34.631Z" hostname="runnervmf4ws1" tests="1" failures="0" errors="0" skipped="0" time="0.003054243">
        <testcase classname="test/sum.test.ts" name="sum &gt; adds two numbers" time="0.001434208">
        </testcase>
    </testsuite>
</testsuites>
