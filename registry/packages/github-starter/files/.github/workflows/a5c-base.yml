name: a5c-base
on:
  workflow_call:
    inputs:
      runner_name:
        description: "Label/name to identify the runner in logs"
        required: true
        type: string
      runs_on:
        description: "Runner label(s) to execute on"
        required: false
        default: ubuntu-latest
        type: string
      events_path:
        description: "Path to events directory"
        required: false
        default: .a5c/events/
        type: string

jobs:
  run-reactor:
    runs-on: ${{ inputs.runs_on }}
    env:
      A5C_CLI_PROFILE: ${{ vars.A5C_CLI_PROFILE || 'azure_codex_gpt5' }}
      RUNNER_NAME: ${{ inputs.runner_name }}
      ENABLE_A5C_TOKEN: ${{ vars.ENABLE_A5C_TOKEN }}
      A5C_CLOUD_SETUP: ${{ vars.A5C_CLOUD_SETUP }}
      A5C_LOG_LEVEL: ${{ github.event.inputs.debug || 'false' && 'debug' || 'info' }}
      DISABLE_AUTOUPDATER: 1
      CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: 1
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      AZURE_OPENAI_PROJECT_NAME: ${{ vars.AZURE_OPENAI_PROJECT_NAME || '' }}
      AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY || '' }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || '' }}
      DEBUG: ${{ github.event.inputs.debug || 'false' }}
      GITHUB_TOKEN: ${{ secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
      DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
      DISCORD_GUILD_ID: ${{ vars.DISCORD_GUILD_ID }}
      A5C_CLI_TOOL: ${{ vars.A5C_CLI_TOOL }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN || '' }}
      SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET || '' }}
      SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN || '' }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN || '' }}
      VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID || '' }}
      VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID || '' }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN || '' }}
      SUPABASE_ORG_ID: ${{ vars.SUPABASE_ORG_ID || '' }}
      SUPABASE_PROJECT_REF: ${{ vars.SUPABASE_PROJECT_REF || '' }}
      SUPABASE_PROJECT_URL: ${{ vars.SUPABASE_PROJECT_URL || '' }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD || '' }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY || '' }}
      STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY || '' }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET || '' }}
      STRIPE_WEBHOOK_URL: ${{ vars.STRIPE_WEBHOOK_URL || '' }}
      STRIPE_WEBHOOK_ID: ${{ vars.STRIPE_WEBHOOK_ID || '' }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID || '' }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY || '' }}
      AWS_REGION: ${{ vars.AWS_REGION || '' }}
      HEALTHCHECKS_A5C_SCHEDULE_PING_URL: ${{ secrets.HEALTHCHECKS_A5C_SCHEDULE_PING_URL || '' }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS || '' }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID || '' }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET || '' }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID || '' }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID || '' }}
      AZURE_AKS_CLUSTER_NAME: ${{ vars.AZURE_AKS_CLUSTER_NAME || '' }}
      AZURE_RESOURCE_GROUP_NAME: ${{ vars.AZURE_RESOURCE_GROUP_NAME || '' }}
      AZURE_APPLICATION_CLIENT_ID: ${{ vars.AZURE_APPLICATION_CLIENT_ID || '' }}
      AZURE_APPLICATION_CLIENT_SECRET: ${{ secrets.AZURE_APPLICATION_CLIENT_SECRET || '' }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID || '' }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET || '' }}
      AUTH_GITHUB_CLIENT_ID: ${{ secrets.AUTH_GITHUB_CLIENT_ID || '' }}
      AUTH_GITHUB_CLIENT_SECRET: ${{ secrets.AUTH_GITHUB_CLIENT_SECRET || '' }}
      AUTH_GITHUB_ORG_ID: ${{ vars.AUTH_GITHUB_ORG_ID || '' }}
      AUTH_GITHUB_ORG_NAME: ${{ vars.AUTH_GITHUB_ORG_NAME || '' }}
      AUTH_GITHUB_ORG_DESCRIPTION: ${{ vars.AUTH_GITHUB_ORG_DESCRIPTION || '' }}
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY || '' }}
      HEROKU_APP_NAME: ${{ vars.HEROKU_APP_NAME || '' }}
      HEROKU_APP_ID: ${{ vars.HEROKU_APP_ID || '' }}
      HEROKU_APP_URL: ${{ vars.HEROKU_APP_URL || '' }}
    steps:
      - name: Filter successful workflow-run
        id: filter-successful-workflow-run
        if: github.event_name == 'workflow_run' && (github.event.workflow_run.conclusion != 'failure' || (github.event.workflow_run.head_branch != 'a5c/main' && github.event.workflow_run.head_branch != 'main') )
        run: |
          echo "skip=true" >> "$GITHUB_OUTPUT"
          exit 0
      - name: a5c token
        id: a5c-token
        continue-on-error: true
        if: steps.filter-successful-workflow-run.outputs.skip != 'true' && env.ENABLE_A5C_TOKEN == 'true'
        uses: a5c-ai/generate-token-action@main
      - name: Run Events Reactor
        id: a5c-reactor
        if: steps.filter-successful-workflow-run.outputs.skip != 'true'
        uses: a5c-ai/a5c@a5c/main
        with:
          github_token: ${{ steps.a5c-token.outputs.a5c_token || secrets.A5C_AGENT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          runner-name: ${{ env.RUNNER_NAME }}
          events: ${{ inputs.events_path }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: a5c-reactor-output
          path: |
            /tmp/parsed-codex.jsonl
            /tmp/full_output.txt